package com.github.dapeng.basic.api.counter;
        import com.github.dapeng.basic.api.counter.domain.serializer.*;

        import com.github.dapeng.core.*;
        import com.github.dapeng.org.apache.thrift.*;
        import com.github.dapeng.org.apache.thrift.protocol.*;

        import com.github.dapeng.core.definition.SoaServiceDefinition;
        import com.github.dapeng.core.definition.SoaFunctionDefinition;

        import java.io.BufferedReader;
        import java.io.InputStreamReader;

        import java.util.Optional;
        import java.util.concurrent.CompletableFuture;
        import java.util.concurrent.Future;
        import com.github.dapeng.basic.api.counter.CounterServiceSuperCodec.*;

        /**
        * Autogenerated by Dapeng-Code-Generator (2.1.0)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *
        **/
        public class CounterServiceCodec {

        
            public static class submitPoint<I extends com.github.dapeng.basic.api.counter.service.CounterService> extends SoaFunctionDefinition.Sync<I, submitPoint_args, submitPoint_result>
            {
              public submitPoint()
              {
                super("submitPoint", new SubmitPoint_argsSerializer(),  new SubmitPoint_resultSerializer());
              }

              @Override
              public submitPoint_result apply(I iface, submitPoint_args submitPoint_args) throws SoaException
              {
                submitPoint_result result = new submitPoint_result();
                
                 iface.submitPoint(submitPoint_args.getDataPoint());
                
                return result;
              }

            }
          
            public static class submitPoints<I extends com.github.dapeng.basic.api.counter.service.CounterService> extends SoaFunctionDefinition.Sync<I, submitPoints_args, submitPoints_result>
            {
              public submitPoints()
              {
                super("submitPoints", new SubmitPoints_argsSerializer(),  new SubmitPoints_resultSerializer());
              }

              @Override
              public submitPoints_result apply(I iface, submitPoints_args submitPoints_args) throws SoaException
              {
                submitPoints_result result = new submitPoints_result();
                
                 iface.submitPoints(submitPoints_args.getDataPoints());
                
                return result;
              }

            }
          
            public static class queryPoints<I extends com.github.dapeng.basic.api.counter.service.CounterService> extends SoaFunctionDefinition.Sync<I, queryPoints_args, queryPoints_result>
            {
              public queryPoints()
              {
                super("queryPoints", new QueryPoints_argsSerializer(),  new QueryPoints_resultSerializer());
              }

              @Override
              public queryPoints_result apply(I iface, queryPoints_args queryPoints_args) throws SoaException
              {
                queryPoints_result result = new queryPoints_result();
                
                result.setSuccess(iface.queryPoints(queryPoints_args.getCondition(),queryPoints_args.getBeginTimeStamp(),queryPoints_args.getEndTimeStamp()));
                
                return result;
              }

            }
          

        public static class getServiceMetadata<I extends com.github.dapeng.basic.api.counter.service.CounterService> extends SoaFunctionDefinition.Sync<I, getServiceMetadata_args, getServiceMetadata_result> {
          public getServiceMetadata() {
            super("getServiceMetadata", new GetServiceMetadata_argsSerializer(), new GetServiceMetadata_resultSerializer());
          }

          @Override
          public getServiceMetadata_result apply(I iface, getServiceMetadata_args args) {
            getServiceMetadata_result result = new getServiceMetadata_result();

            try (InputStreamReader isr = new InputStreamReader(CounterServiceCodec.class.getClassLoader().getResourceAsStream("com.github.dapeng.basic.api.counter.service.CounterService.xml"));
            BufferedReader in = new BufferedReader(isr)) {
              int len = 0;
              StringBuilder str = new StringBuilder("");
              String line;
              while ((line = in.readLine()) != null) {

                if (len != 0) {
                  str.append("\r\n").append(line);
                } else {
                  str.append(line);
                }
                len++;
              }
              result.setSuccess(str.toString());

            } catch (Exception e) {
              e.printStackTrace();
              result.setSuccess("");
            }

            return result;
          }

        }


        public static class echo<I extends com.github.dapeng.basic.api.counter.service.CounterService> extends SoaFunctionDefinition.Sync<I, echo_args, echo_result> {
          public echo() {
            super("echo", new echo_argsSerializer(), new echo_resultSerializer());
          }

          @Override
          public echo_result apply(I iface, echo_args args) {
            echo_result result = new echo_result();

            String echoMsg = (String) TransactionContext.Factory.currentInstance().getAttribute("container-threadPool-info");
            //result.setSuccess("PONG");
            result.setSuccess(echoMsg);
            return result;

          }

        }


        @SuppressWarnings("unchecked")
        public static class Processor<I extends com.github.dapeng.basic.api.counter.service.CounterService> extends SoaServiceDefinition<com.github.dapeng.basic.api.counter.service.CounterService>
        {

          public Processor(com.github.dapeng.basic.api.counter.service.CounterService iface, Class<com.github.dapeng.basic.api.counter.service.CounterService> ifaceClass)
          {
            super(iface, ifaceClass, buildMap(new java.util.HashMap<>()));
          }

          @SuppressWarnings("unchecked")
          private static <I extends com.github.dapeng.basic.api.counter.service.CounterService> java.util.Map<String, SoaFunctionDefinition<I, ?, ?>> buildMap(java.util.Map<String, SoaFunctionDefinition<I, ?, ?>> processMap)
          {
            
                processMap.put("submitPoint", new submitPoint());
              
                processMap.put("submitPoints", new submitPoints());
              
                processMap.put("queryPoints", new queryPoints());
              
            processMap.put("getServiceMetadata", new getServiceMetadata());
            processMap.put("echo", new echo());
            return processMap;
          }
        }

      }
      